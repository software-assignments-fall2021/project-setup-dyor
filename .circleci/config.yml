# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define the jobs we want to run for this project
jobs:
  build-and-test-express-js:
    docker:
      - image: cimg/node:16.13.0 # latest stable node at the time of writing
        # auth:
        #   username: mydockerhub-user
        #   password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - run: echo "this is the build and test express.js job"
      - run: |
          cd back-end
          pwd # for debugging: show current working directory
          ls # for debugging: show sub-directories in here
          cd public
          pwd
          ls
          cd timeSeriesData
          pwd
          ls
      - run: |
          cd back-end
          npm install # install all dependencies listed in package.json
          npm test # run all unit tests
  build-react-js:
    docker:
      - image: cimg/node:16.13.0 # latest stable node at the time of writing
        # auth:
        #   username: mydockerhub-user
        #   password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - run: echo "this is the build react.js job"
      - run: |
          cd back-end
          pwd # for debugging: show current working directory
          ls # for debugging: show sub-directories in here
      - run: |
          cd front-end
          npm install # install all dependencies listed in package.json
          npm run build # have react build the stand-alone front-end code
  deploy:
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - add_ssh_keys:
          fingerprints: 
            - "ee:8b:97:bc:0c:7b:b1:2f:55:f3:dc:4d:28:6a:2f:ef"
      - run: |
          ls -al ~/.ssh
          cat ~/.ssh/id_rsa_ee8b97bc0c7bb12f55f3dc4d286a2fef
          ssh -o "IdentitiesOnly=yes" -i ~/.ssh/id_rsa_ee8b97bc0c7bb12f55f3dc4d286a2fef hanzalla@137.184.30.95 'pwd; cd ./project-setup-dyor; pwd; git status; git pull; pm2 stop all; pwd; cd front-end; npm install; cd ../back-end; pwd; npm install; pm2 start npm -- start;'

# Orchestrate our job run sequence
workflows:
  test-build-and-deploy:
    jobs:
      - build-and-test-express-js
      - build-react-js
      - hold:
         type: approval
         requires:
           - build-and-test-express-js
           - build-react-js
      - deploy:
         requires:
          - hold